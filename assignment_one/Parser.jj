/*
 * Example template taken from Appel's book.
 */

/*****************************
 **** SECTION 1 - OPTIONS ****
 *****************************/

options {
  IGNORE_CASE = true;
  JAVA_UNICODE_ESCAPE = true; 
  LOOKAHEAD=3;
}


/*******************************
 **** SECTION 2 - USER CODE ****
 *******************************/

PARSER_BEGIN(Parser)
  public class Parser {
    public static void main(String args[]) {
      Parser parser = null;

      if(args.length == 0) {
        System.out.println("Reading from standard input . . .");
        parser = new Parser(System.in);
      } else if(args.length == 1) {
        try {
          parser = new Parser(new java.io.FileInputStream(args[0]));
        } catch (java.io.FileNotFoundException e) {
          System.err.println("File " + args[0] + " not found.");
          return;
        }
      } else {
        System.out.println("Parser: Usage is one of:");
        System.out.println("\tjava Parser < inputfile");
        System.out.println("OR");
        System.out.println("\tjava Parser inputfile");
      }

      // Parser is now ready for input.
      try {
        parser.program();
        System.out.println("Program parsed successfully.");
      } catch (ParseException e) {
        System.out.println(e.getMessage());
        System.out.println("Parser encountered errors during parse.");
      }
    }
  }
PARSER_END(Parser)

/***************************************
 **** SECTION 3 - TOKEN DEFINITIONS ****
 ***************************************/

TOKEN_MGR_DECLS : {
  // Incremented or decremented depending on how deep our current level of
  // nested comments are.
  static int commentDepth = 0;
}

// The regexes that if matched will just be skipped.
SKIP : {
  // Single line comments handled here.
  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| " "
| "\t"
| "\n"
}

SKIP : {
  // Multi-line comments handled here.
  "/*" { commentDepth++; } : IN_COMMENT
}

<IN_COMMENT> SKIP: {
  "/*" { commentDepth++; }
| "*/" { commentDepth--;
          if(commentDepth == 0)
            SwitchTo(DEFAULT);
       }
| <~[]>
}

// For the regex on the right, the token on the left is generated.
// Language reserved words.
TOKEN : {
  <BEGIN: "begin">
| <END: "end">
| <MAIN: "main">
| <VAR: "var">
| <CONST: "const">
| <RETURN: "return">
| <INTEGER: "integer">
| <BOOLEAN: "boolean">
| <VOID: "void">
| <IF: "if">
| <ELSE: "else">
| <TRUE: "true">
| <FALSE: "false">
| <WHILE: "while">
| <IS: "is">
| <SKIP_TOKEN: "SKIP">
}

// Symbol tokens.
TOKEN : {
  <COMMA: ",">
| <SEMIC: ";">
| <COLON: ":">
| <EQUALS: "=">
| <LB: "(">
| <RB: ")">
| <PLUS: "+">
| <MINUS: "-">
| <TILDE: "~">
| <OR: "||">
| <AND: "&&">
| <LOGICAL_EQ: "==">
| <NOT_EQ: "!=">
| <LT: "<">
| <LT_EQ: "<=">
| <GT: ">">
| <GT_EQ: ">=">
}


TOKEN : {
  // NUM must start with a positive digit or a negative symbol followed by
  // a positive digit.
  <NUM: ( (["1"-"9"]((<DIGIT>)*))
        | ("-"["1"-"9"]((<DIGIT>)*))
        | "0" )>
| <ID: ((<CHAR>)+(<CHAR> | <NUM> | ["_"])*)>
| <#DIGIT: ["0"-"9"]>
| <#CHAR: ["a"-"z"]|["A"-"Z"]>
}

TOKEN : {
  <OTHER: ~[]>
}


/****************************************************************
 **** SECTION 4 - GRAMMAR AND PRODUCTION RULES - NOT NEEDED. ****
 ****************************************************************/

void program() : {} {
  declList() functionList() main() <EOF>
}

void declList() : {} {
  (decl() <SEMIC> declList())?
}

void decl() : {} {
  varDecl() | constDecl()
}

void varDecl() : {} {
  <VAR> <ID> <COLON> type()
}

void type() : {} {
  <INTEGER> | <BOOLEAN> | <VOID>
}

void constDecl() : {} {
  <CONST> <ID> <COLON> type() <EQUALS> expression()
}

void functionList() : {} {
  (function() functionList())?
}

void function() : {} {
  type() <ID> <LB> paramList() <RB> <IS>
  declList()
  <BEGIN>
  statementBlock()
  <RETURN> <LB> (expression())? <RB> <SEMIC>
  <END>
}

void paramList() : {} {
  (nempParamList())?
}

void nempParamList() : {} {
  (<ID> <COLON> type() (<COMMA> <ID> <COLON> type())*)
}

void main() : {} {
  <MAIN>
  <BEGIN>
  declList()
  statementBlock()
  <END>
}

void statementBlock() : {} {
  (statement() statementBlock())?
}

void statement_id() : {} {
  (<EQUALS> expression() <SEMIC>)
| (<LB> argList() <RB> <SEMIC>)
}

void statement() : {} {
  (<ID> statement_id())
| (<BEGIN> statementBlock() <END>)
| (<IF> condition() <BEGIN> statementBlock() <END> <ELSE> <BEGIN> statementBlock() <END>)
| (<WHILE> condition() <BEGIN> statementBlock() <END>)
| (<SKIP_TOKEN> <SEMIC>)
}

void expression() : {} {
  (fragment() fragment_1_and_prime())
| (<LB> expression() <RB>)
| (<ID> <LB> argList() <RB>)
}

void fragment_1_and_prime() : {} {
  (binaryArithOp() fragment() fragment_1_and_prime())?
}

void fragment_2_without_id() : {} {
  (<MINUS> <ID>)
| (<NUM>)
| (<TRUE>)
| (<FALSE>)
}

void binaryArithOp() : {} {
  <PLUS> | <MINUS>
}

void fragment_id() : {} {
  (<LB> argList() <RB> fragment_1_and_prime())
| fragment_1_and_prime()
}

void fragment() : {} {
  (<LB> expression() <RB> fragment_1_and_prime())
| (<ID> fragment_id())
| (fragment_2_without_id() fragment_1_and_prime())
}

void condition() : {} {
  (<TILDE> condition() condition_prime())
| (<LB> condition() <RB> condition_prime())
| (expression() compOpp() expression() condition_prime())
}

void orAndRule() : {} {
  (<OR> | <AND>)
}

void condition_prime() : {} {
  (orAndRule() condition() condition_prime())?
}

void compOpp() : {} {
  <LOGICAL_EQ>
| <NOT_EQ>
| <LT>
| <LT_EQ>
| <GT>
| <GT_EQ>
}

void argList() : {} {
  (nempArgList())?
}

void nempArgList() : {} {
  (<ID> (<COMMA> <ID>)*)
}
